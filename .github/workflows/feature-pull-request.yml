name: Feature pull request Workflow
on:
  pull_request:
    branches:
      - "main"
    types:
      - opened
      - synchronize
permissions:
  contents: write
  pull-requests: write
jobs:
  assemble:
    name: "Assemble project"
    runs-on: ubuntu-latest
    steps:
      - name: "Environment"
        run: |
          echo "Agent ${{ runner.name }}"
          echo "Operating system ${{ runner.os }}"
          echo "Architecture ${{ runner.arch }}"
      - name: "Check out repository"
        uses: actions/checkout@v4
      - name: "Set up Java"
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
      - name: "Set up Gradle"
        uses: gradle/actions/setup-gradle@v3
        with:
          cache-read-only: false
          cache-encryption-key: ${{ secrets.GRADLE_ENCRYPTION_KEY }}
      - name: "Grant permissions"
        run: chmod +x gradlew
      - name: "Assemble application"
        run: ./gradlew assemble
      - name: "Assemble instrumented test application"
        run: ./gradlew assembleDebugAndroidTest
      - name: "Assemble unit tests"
        run: ./gradlew assembleDebugUnitTest
  unit-tests:
    name: "Unit and screenshot tests"
    runs-on: ubuntu-latest
    needs:
      - assemble
    steps:
      - name: "Environment"
        run: |
          echo "Agent ${{ runner.name }}"
          echo "Operating system ${{ runner.os }}"
          echo "Architecture ${{ runner.arch }}"
      - name: "Check out repository"
        uses: actions/checkout@v4
        with:
          lfs: true
      - name: "Set up Java"
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
      - name: "Set up Gradle"
        uses: gradle/actions/setup-gradle@v3
        with:
          cache-read-only: false
          cache-encryption-key: ${{ secrets.GRADLE_ENCRYPTION_KEY }}
      - name: "Grant permissions"
        run: chmod +x gradlew
      - name: "Run unit tests"
        run: ./gradlew testDebugUnitTest
      - name: "Run screenshot tests"
        run: ./gradlew verifyPaparazziDebug
  instrumented-tests:
    name: "Instrumented tests"
    runs-on: ubuntu-latest
    needs:
      - assemble
    strategy:
      matrix:
        api-level: [ 34 ]
        target: [ google_apis ]
    steps:
      - name: "Environment"
        run: |
          echo "Agent ${{ runner.name }}"
          echo "Operating system ${{ runner.os }}"
          echo "Architecture ${{ runner.arch }}"
      - name: "Enable hardware acceleration"
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm
      - name: "Check out repository"
        uses: actions/checkout@v4
      - name: "Set up Java"
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
      - name: "Set up Gradle"
        uses: gradle/actions/setup-gradle@v3
        with:
          cache-read-only: false
          cache-encryption-key: ${{ secrets.GRADLE_ENCRYPTION_KEY }}
      - name: "Grant permissions"
        run: chmod +x gradlew
      - name: "Set up emulator caching"
        uses: actions/cache@v4
        id: avd-cache
        with:
          path: |
            ~/.android/avd/*
            ~/.android/adb*
          key: avd-${{ matrix.api-level }}-${{ matrix.target }}
      - name: "Create emulator snapshot"
        if: steps.avd-cache.outputs.cache-hit != 'true'
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          target: ${{ matrix.target }}
          arch: x86_64
          force-avd-creation: false
          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: echo "Generated emulator snapshot."
      - name: "Run instrumented tests"
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          target: ${{ matrix.target }}
          arch: x86_64
          force-avd-creation: false
          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          disable-animations: true
          script: ./gradlew connectedDebugAndroidTest
  code-quality:
    name: "Code quality"
    runs-on: ubuntu-latest
    needs:
      - assemble
    steps:
      - name: "Environment"
        run: |
          echo "Agent ${{ runner.name }}"
          echo "Operating system ${{ runner.os }}"
          echo "Architecture ${{ runner.arch }}"
      - name: "Check out repository"
        uses: actions/checkout@v4
      - name: "Set up Java"
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
      - name: "Set up Gradle"
        uses: gradle/actions/setup-gradle@v3
        with:
          cache-read-only: false
          cache-encryption-key: ${{ secrets.GRADLE_ENCRYPTION_KEY }}
      - name: "Grant permissions"
        run: chmod +x gradlew
      - name: "Detekt"
        run: ./gradlew detekt
  dependabot:
    name: "Dependabot auto-merge"
    runs-on: ubuntu-latest
    if: ${{ github.actor == 'dependabot[bot]' }}
    needs:
      - assemble
      - unit-tests
      - instrumented-tests
      - code-quality
    steps:
      - name: "Check out repository"
        uses: actions/checkout@v3
      - name: "Auto-merge Dependabot PR"
        run: "gh pr merge --auto --squash $PR_URL"
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
